@using ODP.Web.UI.Extensions
@model PagedResult<ODP.Web.UI.Models.DueDiligence.DueDiligenceViewModel>
@{
    Layout = "_Layout";
}


<nav class="navbar bg-light-blue">
    <div class="row ml-5">
        <!-- Formulário de busca -->
        <form method="get" action="@Url.Action("Index")" class="d-flex flex-wrap align-items-center gap-3 w-100">

            <!-- Campo de pesquisa única -->
            <div class="form-group">
                <label for="searchTerm">Pesquisar:</label>
                <input type="text"
                       id="searchTerm"
                       name="termo"
                       value="@ViewBag.TermoAtual"
                       class="form-control"
                       placeholder="Digite Nome, CPF ou Protocolo" />
            </div>

            <!-- Botão Pesquisar -->
            <div class="mt-3">
                <button type="submit" class="btn btn-primary">
                    Pesquisar
                </button>
            </div>
        </form>
    </div>
</nav>



<div class="container-fluid">
    <div class="table-responsive shadow">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Due <b>Diligence</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <a asp-controller="DueDiligence" asp-action="Create"
                           class="btn btn-success">
                            <img src="~/svg/adicionar.svg" width="20" height="20"
                                 class="d-inline-block align-top" alt="Adicionar">
                            <span class="m-1">Novo</span>
                        </a>
                    </div>
                </div>
            </div>

            @if (Model != null && Model.Results.Any())
            {
                
                    <table id="tabelaPrincipal" class="table table-striped table-hover" style="width:90%">
                        <thead>
                            <tr>
                                <th>Editar</th>
                                <th>ID</th>
                                <th>@Html.DisplayNameFor(model => model.Results.FirstOrDefault().NroProtocolo)</th>
                                <th>@Html.DisplayNameFor(model => model.Results.FirstOrDefault().Nome)</th>
                                <th>@Html.DisplayNameFor(model => model.Results.FirstOrDefault().CPF)</th>
                                <th>@Html.DisplayNameFor(model => model.Results.FirstOrDefault().Orgao)</th>
                                <th>@Html.DisplayNameFor(model => model.Results.FirstOrDefault().Decreto)</th>
                                <th>@Html.DisplayNameFor(model => model.Results.FirstOrDefault().DataSolicitacao)</th>
                                <th>@Html.DisplayNameFor(model => model.Results.FirstOrDefault().DataResposta)</th>
                                <th>@Html.DisplayNameFor(model => model.Results.FirstOrDefault().Observacao)</th>
                                <th>@Html.DisplayNameFor(model => model.Results.FirstOrDefault().Evidencias)</th>
                                <th>Opções</th>
                            </tr>
                        </thead>
                    <tbody id="tabelaCorpo">
                            @{
                            int contador = (Model.PageNumber - 1) * Model.PageSize + 1;
                             }
                            @foreach (var item in Model.Results)
                            {

            

                                <tr>
                                    <td>
                                        <button type="button"
                                                class="btn btn-info btn-editar"
                                                data-toggle="modal"
                                                data-target="#EditModal"
                                                onclick="location.href='@Url.Action("Editar", new { id = item.Id })'">
                                            <img src="~/svg/editar.svg" width="20" height="20" class="d-inline-block align-top" alt="">
                                        </button>
                                    </td>
                                    <td>@contador</td> <!-- ID Sequencial -->
                                    <td>@Html.DisplayFor(modelItem => item.NroProtocolo)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Nome)</td>
                                    <td>@Html.DisplayFor(modelItem => item.CPF)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Orgao)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Decreto)</td>
                                    <td>@Html.DisplayFor(modelItem => item.DataSolicitacao)</td>
                                    <td>@Html.DisplayFor(modelItem => item.DataResposta)</td>
                                    <td>
                                        <button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#observacaoModal-@item.Id">
                                            <img src="~/svg/vizualizar.svg" width="20" height="20" class="d-inline-block align-top" alt="">
                                        </button>
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#evidenciasModal-@item.Id">
                                            <img src="~/svg/vizualizar.svg" width="20" height="20" class="d-inline-block align-top" alt="">
                                        </button>
                                    </td>
                                    <td>
                                        <div class="d-flex">
                                            <a href="@Url.Action("GerarPdf", new { id = item.Id })" class="btn btn-primary btn-print " target="_blank">
                                                <img src="~/svg/imprimir.svg" width="20" height="20" class="d-inline-block align-top" alt="">
                                            </a>
                                            <div class=" px-1"></div>
                                            <button type="button" class="btn btn-info btn-duplicar" onclick="location.href='@Url.Action("Duplicar", new { id = item.Id })'">
                                                <img src="~/svg/duplicar.svg" width="20" height="20" class="d-inline-block align-top" alt="">
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                contador++; // 🔹 Incrementa o contador a cada linha
                            }
                        </tbody>
                    </table>
                
            }
            else
            {
                <p>Nenhum resultado encontrado.</p>
            }

            <!-- Paginação -->
            <ul class="pagination">
                @if (Model.PageNumber > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", new { pageNumber = Model.PageNumber - 1, pageSize = Model.PageSize, termo = ViewBag.TermoAtual })">Anterior</a>
                    </li>
                }

                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    if (i <= 5 || i > Model.TotalPages - 3 || (i >= Model.PageNumber - 1 && i <= Model.PageNumber + 1))
                    {
                        <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { pageNumber = i, pageSize = Model.PageSize, termo = ViewBag.TermoAtual })">@i</a>
                        </li>
                    }
                    else if (i == 6 || i == Model.TotalPages - 4)
                    {
                        <li class="page-item disabled"><span class="page-link">...</span></li>
                    }
                }

                @if (Model.PageNumber < Model.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", new { pageNumber = Model.PageNumber + 1, pageSize = Model.PageSize, termo = ViewBag.TermoAtual })">Próximo</a>
                    </li>
                }
            </ul>




            @foreach (var item in Model.Results)
            {
                <!-- Modal Observacao -->
                <div class="modal fade" id="observacaoModal-@item.Id" tabindex="-1" role="dialog" aria-labelledby="observacaoModalLabel-@item.Id" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="observacaoModalLabel-@item.Id">Observação</h5>
                            </div>
                            <div class="modal-body">
                                @Html.DisplayFor(modelItem => item.Observacao)
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Modal Evidencias -->
                <div class="modal fade" id="evidenciasModal-@item.Id" tabindex="-1" role="dialog" aria-labelledby="evidenciasModalLabel-@item.Id" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="evidenciasModalLabel-@item.Id">Evidências</h5>
                            </div>
                            <div class="modal-body" style="white-space: pre-wrap;overflow-wrap: break-word;">
                                @Html.DisplayFor(modelItem => item.Evidencias)
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
                            </div>
                        </div>
                    </div>
                </div>
            }

        </div>

    </div>
</div>


@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        function gerarEVisualizarPdf(url) {
            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Ocorreu um erro ao gerar o PDF.');
                    }
                    return response.blob();
                })
                .then(blob => {
                    const pdfUrl = URL.createObjectURL(blob);
                    window.open(pdfUrl, '_blank');
                })
                .catch(error => {
                    console.error('Erro:', error);
                });
        }
    </script>

    <script>
       
                document.addEventListener("DOMContentLoaded", function () {
            const searchInput = document.getElementById("searchTerm");
            const tabelaCorpo = document.getElementById("tabelaCorpo");

            let timeout = null;

            searchInput.addEventListener("input", function () {
                clearTimeout(timeout); // Evita múltiplas requisições rápidas
                let termo = this.value.trim();

                if (termo.length < 2) {
                    return; // 🔹 Permite digitação contínua sem travar
                }

                timeout = setTimeout(() => {
                    fetch(`/DueDiligence/Index?termo=${encodeURIComponent(termo)}`)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error("Erro na busca"); // 🔹 Captura erro de resposta
                            }
                            return response.text();
                        })
                        .then(data => {
                            // Captura o novo <tbody> da resposta e substitui
                            const parser = new DOMParser();
                            const newDocument = parser.parseFromString(data, "text/html");
                            const novoCorpoTabela = newDocument.querySelector("#tabelaCorpo");

                            if (novoCorpoTabela) {
                                tabelaCorpo.innerHTML = novoCorpoTabela.innerHTML; // 🔹 Atualiza apenas o tbody
                            }
                        })
                        .catch(error => {
                            console.error("Erro na busca:", error);
                        });
                }, 300); // Aguarda 300ms antes de fazer a requisição
            });
        });

    </script>

}
